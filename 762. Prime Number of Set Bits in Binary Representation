将素数放到了一个集合里面
求二进制上1的个数，n&(n-1)是可以消去n最低位的1的，这样求应该是最快的

class Solution {
    public int countPrimeSetBits(int L, int R) {
        Set<Integer> primes = new HashSet<>(Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19));
        int count = 0;
        for (int i = L; i <= R; i++) {
            int bit = bitCount(i);
            if (primes.contains(bit))
                count++;
        }
        return count;
    }

    // 求二进制上1的个数
    private int bitCount(int n) {
        int count = 0;
        while (n != 0) {
            n &= (n - 1);
            count++;
        }
        return count;
    }
}
不把素数存起来速度也差不多
22ms 67%
class Solution {
    public int countPrimeSetBits(int L, int R) {
        int count = 0;
        for (int i = L; i <= R; i++) {
            int bit = bitCount(i);
            if (prime(bit))
                count++;
        }
        return count;
    }

    // 求二进制上1的个数
    private int bitCount(int n) {
        int count = 0;
        while (n != 0) {
            n &= (n - 1);
            count++;
        }
        return count;
    }

    private boolean prime(int n) {
        if (n == 2 || n == 3)
            return true;
        if ((n & 1) == 0 || n == 1)
            return false;
        for (int i = 3; i * i <= n; i += 2)
            if (n % i == 0)
                return false;
        return true;
    }
}
