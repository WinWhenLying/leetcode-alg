https://leetcode.com/problems/combination-sum-iii/description/

其实就是一个dfs问题，感觉自己还是没掌握好，还是看discuss才理顺

1. 1ms 100% 
class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> ans = new ArrayList<>();
        combination(ans, new ArrayList<Integer>(), k, 1, n);
        return ans;
    }

    private void combination(List<List<Integer>> ans, ArrayList<Integer> comb, int k, int start, int n){
        if(comb.size() == k){
            if(n == 0) {
                ArrayList<Integer> temp = new ArrayList<>(comb);
                ans.add(temp);
            }
            return;
        }
        for(int i=start;i<10;i++){
            comb.add(i);
            combination(ans,comb,k,i+1,n-i);
            comb.remove(comb.size() - 1);
        }
    }
}
