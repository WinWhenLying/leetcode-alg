https://leetcode.com/problems/third-maximum-number/description/
1 6ms 75.59%
/* 疯狂的分类讨论
 */
class Solution {
    public int thirdMax(int[] nums) {
        int max1=0,max2=0,max3=0;
        boolean max3Exist = false, max2Exist = false;
        for(int i=1;i<nums.length;i++) {
        	if(nums[i] > nums[max1]) {        		
        		if(max2Exist) {
        			max3 = max2;
        			max3Exist = true;
        		}
        		max2 = max1;
        		if(!max2Exist) {
        			max2Exist = true;
        		}
        		max1 = i;
        	} else if(nums[i] == nums[max1]) {
        		continue;
        	} else if(!max2Exist || nums[i] > nums[max2]) {
        		if(max2Exist) {
        			max3 = max2;
        			max3Exist = true;
        		}
        		max2 = i;
        		max2Exist = true;
        	} else if(nums[i] == nums[max2]) {
        		continue;
        	} else if(!max3Exist || nums[i] > nums[max3]) {
        		max3 = i;
        		max3Exist = true;
        	}
        }
        if(max3Exist) {
        	return nums[max3];
        } else {
        	return nums[max1];
        }
    }
}

2别人答案，利用了LONG.min
4ms 98.62%
/* 利用LONG.MIN
 * 要类型转换
 */
class Solution {
    public int thirdMax(int[] nums) {
        long max1=Long.MIN_VALUE,max2=Long.MIN_VALUE,max3=Long.MIN_VALUE;
        for(int n: nums) {
        	if(n > max1) {
        		max3 = max2;
        		max2 = max1;
        		max1 = n;
        	} else if(n == max1) {
        	} else if(n > max2) {
        		max3 = max2;
        		max2 = n;
        	} else if(n == max2) {
        	} else if(n > max3) {
        		max3 = n;
        	}
        }
        if(max3 == Long.MIN_VALUE) {
        	return (int)max1;
        } else {
        	return (int)max3;
        }
    }
}
