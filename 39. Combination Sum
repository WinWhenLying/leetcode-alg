1 21ms 63.72%  

class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
    	List<List<Integer>> ans = new ArrayList<>();
    	List<Integer> ls = new ArrayList<>();
    	dfs(ans,candidates,target,0,0,ls);
    	return ans;
    }
    private void dfs(List<List<Integer>> ans,int[] candidates,int target,int sum,int index,List<Integer> ls) {
    	if(sum > target) 
    		return;
    	if(sum == target) {
    		ans.add(new ArrayList<Integer>(ls));
    		return;
    	}
    	if(index == candidates.length)
    		return;
    	ls.add(candidates[index]);
    	dfs(ans,candidates,target,sum+candidates[index],index,ls);
    	ls.remove(ls.size()-1);
    	dfs(ans,candidates,target,sum,index+1,ls);	
    }
}
