10ms 73%
最快的是在计算过程中就把arr构造好了，我这个多一次遍历HashMap

class Solution {
    private int maxSum = 0;

    public int[] findFrequentTreeSum(TreeNode root) {
        HashMap<Integer, Integer> mp = new HashMap<>();
        push(mp, root);
        ArrayList<Integer> arr = new ArrayList<>();
        for (int k : mp.keySet()) {
            if (mp.get(k) == maxSum)
                arr.add(k);
        }
        int[] ans = new int[arr.size()];
        for (int i = 0; i < ans.length; i++) {
            ans[i] = arr.get(i);
        }
        return ans;
    }

    private int push(HashMap<Integer, Integer> mp, TreeNode root) {
        if (root == null)
            return 0;
        int left = push(mp, root.left);
        int right = push(mp, root.right);
        int sum = left + right + root.val;
        mp.put(sum, mp.getOrDefault(sum, 0) + 1);
        if (mp.get(sum) > maxSum)
            maxSum = mp.get(sum);
        return sum;
    }

    public static void main(String[] args) {
        TreeNode root = new TreeNode(5);
        root.left = new TreeNode(2);
        root.right = new TreeNode(-3);
        Solution s = new Solution();
        int[] a = s.findFrequentTreeSum(root);
    }
}

7ms 100%
按最快的思路重写的
class Solution {
    private int maxCount = 0;

    public int[] findFrequentTreeSum(TreeNode root) {
        HashMap<Integer, Integer> mp = new HashMap<>();
        ArrayList<Integer> arr = new ArrayList<>();
        push(mp, root, arr);
        int[] ans = new int[arr.size()];
        for (int i = 0; i < ans.length; i++) {
            ans[i] = arr.get(i);
        }
        return ans;
    }

    private int push(HashMap<Integer, Integer> mp, TreeNode root, ArrayList<Integer> arr) {
        if (root == null)
            return 0;
        int left = push(mp, root.left, arr);
        int right = push(mp, root.right, arr);
        int sum = left + right + root.val;
        int count = mp.getOrDefault(sum, 0) + 1;
        if (count > maxCount) {
            maxCount = count;
            arr.clear();
            arr.add(sum);
        } else if (count == maxCount) {
            arr.add(sum);
        }
        mp.put(sum, count);
        return sum;
    }

    public static void main(String[] args) {
        TreeNode root = new TreeNode(5);
        root.left = new TreeNode(2);
        root.right = new TreeNode(-3);
        Solution s = new Solution();
        int[] a = s.findFrequentTreeSum(root);
    }
}
