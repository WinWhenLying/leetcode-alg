https://leetcode.com/submissions/detail/143097161/

1. 12ms 干掉20.95%

class Solution {
    public int hammingDistance(int x, int y) {
        int m;
        if(x>=y) {
        	m = x;
        } else {
        	m = y;
        }
        int ans=0;
        int xx,yy;
        while(m != 0) {
        	xx = x%2;
        	yy = y%2;
        	x /= 2;
        	y /= 2;
        	if(xx != yy)
        		ans++;
        	m /= 2;
        }
    	return ans;
    }
}

2. 改成移位运算符，没差

class Solution {
    public int hammingDistance(int x, int y) {
        int m;
        if(x>=y) {
        	m = x;
        } else {
        	m = y;
        }
        int ans=0;
        int xx,yy;
        while(m != 0) {
        	xx = x%2;
        	yy = y%2;
        	x = x>>1;
        	y = y>>1;
        	if(xx != yy)
        		ans++;
        	m = m>>1;
        }
    	return ans;
    }
}

3. 用了异或^运算，快了一点 40.08%

class Solution {
    public int hammingDistance(int x, int y) {
        int m = x^y;
        int ans=0;
        while(m != 0) {
        	if(m%2 == 1)
        		ans++;
        	m = m/2;
        }
    	return ans;
    }
}
  
