https://leetcode.com/problems/search-insert-position/description/

1 6ms 64.87% O(logN)
/* 二分法递归
 */

class Solution {
    public int searchInsert(int[] nums, int target) {
        return find(nums,0,nums.length-1,target);
    }
    private int find(int[] nums,int left,int right,int target) {
    	if(left > right) {
    		return left;
    	}
    	int mid = (left+right)/2;
    	if(nums[mid] == target) {
    		return mid;
    	} else if(nums[mid] > target) {
    		return find(nums,left,mid-1,target);
    	} else {
    		return find(nums,mid+1,right,target);
    	}
    }
}

2 5ms 100% O(logN)
/* 二分法非递归
 */

class Solution {
    public int searchInsert(int[] nums, int target) {
        int l=0,r=nums.length-1;
        int mid;
        while(l<r) {
        	mid = (l+r)/2;
        	if(nums[mid] == target) {
        		return mid;
        	} else if(nums[mid] > target) {
        		r = mid-1;
        	} else {
        		l = mid + 1; 
        	}
        }
        return l;
    }
}
